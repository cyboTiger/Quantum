@* Main.razor *@
@page "/wc-search"
@using SearchModule
@inject IJSRuntime JSRuntime

<PageTitle>WheelchairSearch</PageTitle>

@if(displayMode == "Focus")
{
    <Button Type="ButtonType.Default"
            Size="ButtonSize.Default"
            Shape="ButtonShape.Round"
            OnClick="SwitchDisplayMode"
            Ghost>
            <Icon Type="@IconType.Outline.Eye"/>
    </Button>

    <br>
}

<div>

@if(displayMode != "Focus")
{
    <Flex Direction="FlexDirection.Horizontal" Align="FlexAlign.Center" Justify="FlexJustify.Center" Gap="FlexGap.Small">
        <svg id="_图层_1" data-name="图层 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 694.58 752.04"
        style="width: 64px; height: 64px; flex: 0 0 auto;">
            <defs>
                <style>
                .cls-1 {
                    fill: #1890ff;
                }
                </style>
            </defs>
            <path class="cls-1" d="M578.54,366.37c-.14-.01-.29-.02-.44-.02-8.72-.26-17.46-.28-26.19-.28,9.93,28.22,15.34,58.58,15.34,90.2,0,6.28-.21,12.51-.64,18.68-9.59,141.21-127.19,252.79-270.84,252.79S24.29,606.2,24.29,456.27c0-137.57,102.32-251.24,235.01-269.05,11.93-1.6,24.1-2.43,36.47-2.43,27.89,0,54.8,4.21,80.13,12.03-1.58-9.32-3.27-18.61-5.6-27.73-23.69-6.11-48.54-9.36-74.14-9.36-11.51,0-22.86.66-34.03,1.93C114.59,178.54,0,303.83,0,455.88c0,163.56,132.59,296.16,296.16,296.16,69.76,0,133.89-24.12,184.5-64.49,4.87-3.87,9.61-7.9,14.22-12.08,3.84-3.48,7.59-7.06,11.25-10.73,5.55-5.58,10.87-11.38,15.97-17.38,29.43-34.71,51.02-76.28,62.01-121.98,5.36-22.29,8.2-45.56,8.2-69.5,0-31.2-4.82-61.27-13.77-89.51ZM512.35,292.57c3.6-1.72,6.69-4.42,9.13-8.39,3.22-5.23,4.38-10.75,3.85-15.89-5.76-7.04-11.84-13.8-18.23-20.27-2-.49-4.14-.78-6.39-.82-10.7-.21-21.41-.29-32.12-.3,16.3,13.46,31,28.8,43.76,45.67Z"/>
            <path class="cls-1" d="M542.44,447.37c-1.01-28.61-6.89-55.99-16.84-81.31-5.7,0-11.41,0-17.11.01,10.67,25.08,17.04,52.44,18.18,81.14.13,3.1.19,6.22.19,9.36,0,127.78-103.59,231.37-231.37,231.37s-231.37-103.59-231.37-231.37c0-117.84,88.08-215.1,202.01-229.52,9.61-1.22,19.41-1.85,29.36-1.85,31.6,0,61.73,6.34,89.17,17.81-2.85-4.4-3.08-11.95-3.96-18.57-26.47-9.7-55.06-14.99-84.89-14.99-11.03,0-21.88.72-32.52,2.13-120.93,15.92-214.28,119.4-214.28,244.67,0,136.3,110.5,246.79,246.8,246.79s246.79-110.49,246.79-246.79c0-2.97-.05-5.93-.16-8.88ZM461.17,295.07c7.18-.01,14.35-.01,21.53,0-16.14-18.71-35.04-34.96-56.07-48.13-5.22,0-10.43-.01-15.65-.04-5.11-.02-11.17.85-16.29.59,24.94,11.85,47.42,28.04,66.48,47.58Z"/>
            <g>
                <polygon class="cls-1" points="563.33 743.91 529.98 743.91 477.14 691.07 493.81 674.39 563.33 743.91"/>
                <polygon class="cls-1" points="618.66 743.91 585.31 743.91 503.54 662.15 520.22 645.47 618.66 743.91"/>
            </g>
            <path class="cls-1" d="M669.38,655.95c-20.38,7.41-39.92-1.49-47.65-23.18-12.73-35.73-25.19-71.55-37.62-107.39-5.83-16.81-11.65-33.62-17.5-50.43-.92-2.66-1.84-5.32-2.77-7.98-5.26-15.09-8.45-18.87-21.4-19.6-1.96-.12-4.14-.16-6.58-.16h-9.19c-60.11-.01-120.22.02-180.34-.05-5.16-.01-10.41-.2-15.47-1.12-18.3-3.34-27.14-12.19-30.49-30.51-10.57-57.9-21.03-115.83-31.54-173.75-.89-4.91-1.79-9.82-2.7-14.73-.95-5.16-1.9-10.31-2.84-15.47-1.11-6.14-2.2-12.27-3.23-18.42-.34-2-.59-3.99-.76-5.94-.79-9.17.22-17.81,2.83-25.56,5.81-17.29,19.49-30.15,38.51-34.58,30.14-7.02,60.35,8.7,68.44,37.41.43,1.53.84,3.06,1.22,4.6,2.33,9.12,4.02,18.41,5.6,27.73,1.38,8.08,2.68,16.17,4.25,24.2.22,1.09.39,2.24.55,3.42.88,6.62,1.11,14.17,3.96,18.57.47.75,1.03,1.41,1.68,1.95,2.03,1.71,4.99,2.37,8.35,2.53,5.12.26,11.18-.61,16.29-.59,5.22.03,10.43.04,15.65.04,13.99,0,27.97-.07,41.96-.04,10.71.01,21.42.09,32.12.3,2.25.04,4.39.33,6.39.82,10.41,2.56,17.23,10.75,18.23,20.27.53,5.14-.63,10.66-3.85,15.89-2.44,3.97-5.53,6.67-9.13,8.39-3.72,1.79-8,2.52-12.66,2.51-5.66-.01-11.33-.01-16.99-.01-7.18-.01-14.35-.01-21.53,0-17.98.01-35.97.04-53.95.05-3.27.01-6.54,0-10.84,0,3,22.93,5.63,44.66,9.06,66.27.31,1.97,5.72,4.45,8.78,4.47,31.42.21,62.84.21,94.27.21,5.7-.01,11.41-.01,17.11-.01s11.2.01,16.8.01h9.51c8.73,0,17.47.02,26.19.28.15,0,.3.01.44.02,18.21.67,30.55,9.62,36.78,27.04,25.59,71.49,51.39,142.9,76.8,214.45,7.41,20.88-2.38,40.68-22.74,48.09Z"/>
            <path class="cls-1" d="M335.28,110.57c-30.51-.13-54.64-24.87-54.35-55.72C281.22,23.94,305.61-.27,336.22,0c29.81.26,54.4,25.4,54.11,55.3-.31,31.01-24.6,55.39-55.04,55.27Z"/>
        </svg>
        <Title level="2">WheelchairSearch</Title>
    </Flex>
    <br><br>
}

@* <Segmented TValue="string" Labels=@(new[]{"Focus", "Standard"}) Value=@displayMode OnChange=@setDisplayMode /> *@

<Search Size="InputSize.Large" EnterButton="true" Loading=@(!init && !resultReady) @bind-Value="searchTxt" OnSearch="OnSearch" AutoFocus=@true/>

@if(displayMode != "Focus")
{
    <br><br>
    <Flex Wrap="FlexWrap.Wrap"
          Gap="FlexGap.Small"
          Direction="FlexDirection.Horizontal" >
        <Button Type="@(enableAI ? ButtonType.Primary : ButtonType.Default)" 
                Shape="ButtonShape.Round"
                OnClick="SwitchAI" >
            <Icon Type="@IconType.Fill.Bulb"/>
            <span>AI Enhance</span>
        </Button>
        <Button Type="ButtonType.Primary"
                Size="ButtonSize.Default"
                Shape="ButtonShape.Round"
                OnClick="SwitchSort">
            <Icon Type="@IconType.Outline.Bars"/>
            Most @(sorts[sortBy])
        </Button>
        <Button Type="ButtonType.Primary"
                Size="ButtonSize.Default"
                Shape="ButtonShape.Round"
                OnClick="SwitchDivide">
            <Icon Type="@IconType.Outline.Cluster"/>
            From @(divide[divideBy])
        </Button>
        @* <Button Type="@(ButtonType.Primary)"
            Size="ButtonSize.Default"
            Shape="ButtonShape.Round"
            OnClick="SwitchDivide">
            <Icon Type="@IconType.Outline.Cluster"/>
            <span>Divide by Source</span>
        </Button> *@
        <Button Type="@(enableTimeFilter ? ButtonType.Primary : ButtonType.Default)"
                Size="ButtonSize.Default"
                Shape="ButtonShape.Round"
                OnClick="SwitchTimeFilter">
            <Icon Type="@IconType.Fill.Filter"/>
            <span>Time Filter</span>
        </Button>
        <a href="/wc-settings">
            <Button Shape="ButtonShape.Round">
                <Icon Type="@IconType.Fill.Setting"/>
                <span>More settings</span>
            </Button>
        </a>
        <Button Type="ButtonType.Default"
                Size="ButtonSize.Default"
                Shape="ButtonShape.Round"
                OnClick="SwitchDisplayMode"
                Ghost>
            <Icon Type="@IconType.Outline.EyeInvisible"/>
        </Button>
            
    </Flex>
    @if(enableTimeFilter)
    {
        <br>
        <RangePicker TValue="DateTime?[]"
                    @bind-Value="selectedDates" />
    }
}


<Divider />

@if(resultReady)
{
    <div>
        <AntList DataSource="@data"
                 Size="ListSize.Large">
            <Header>Found @data.Count Results</Header>
            <ChildContent Context="item">
                <ListItem>
                    <TitleTemplate>
                        <Button Type="ButtonType.Default"
                                Size="ButtonSize.Default"
                                Shape="ButtonShape.Round"
                                OnClick="@(() => openUrl(item.url))"
                        >@item.title</Button>
                    </TitleTemplate>
                    <div>@item.date</div> 
                </ListItem>
            </ChildContent>
            <Footer>No further results</Footer>
        </AntList>
    </div>
} else {
    <Empty />
}

<BackTop />

</div>

@code {
    [Inject]
    public SearchService? searchService { get; set; }

    private string displayMode = "Standard";

    private async Task SwitchDisplayMode()
    {
        if(displayMode == "Focus") displayMode = "Standard";
        else if(displayMode == "Standard") displayMode = "Focus";
        await InvokeAsync(StateHasChanged);
    }
    private string searchTxt = string.Empty;
    private bool enableAI = false;
    private bool enableTimeFilter = false;
    private bool init = true;
    private bool resultReady = false;
    private int sortBy = 0;
    private string[] sorts = new string[2]
        { "Relavant", "Recent" };
    private int divideBy = 0;
    private string[] divide = new string[]
        { "All" };
    private DateTime?[] selectedDates = new DateTime?[2];

    private async Task OnSearch()
    {
        init = false;
        resultReady = false;
        Console.WriteLine($"Searching for: {searchTxt}");
        
        try
        {
            // 调用 SearchService 的 getSearchResult 方法
            data = await searchService.getSearchResult(searchTxt);
            resultReady = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during search: {ex.Message}");
            resultReady = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task openUrl(string url)
    {
        await JSRuntime.InvokeVoidAsync("window.open", url, "_blank");
    }

    private void SwitchAI()
    {
        enableAI = !enableAI;
        Console.WriteLine("Switch AI: " + enableAI);
    }
    private void SwitchDivide()
    {
        divideBy = (divideBy + 1) % divide.Length;
        Console.WriteLine("Switch Divide: " + divide[divideBy]);
    }
    private void SwitchTimeFilter()
    {
        enableTimeFilter = !enableTimeFilter;
        Console.WriteLine("Switch Time Filter: " + enableTimeFilter);
    }
    private void SwitchSort()
    {
        sortBy = (sortBy + 1) % sorts.Length;
        Console.WriteLine("Switch Sort: " + sorts[sortBy]);
    }

    public List<(string title, string url, string date, int number)> data = new()
    {
        ("Sample Title 1", "http://zdbk.zju.edu.cn", "2025-01-06", 1),
        ("Sample Title 2", "https://www.zju.edu.cn", "2024-05-04", 2)
    };
}